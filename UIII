--[[ 
    Rayfield Interface Suite
    by Sirius
    
    shlex | Designing + Programming
    iRay  | Programming
    Max   | Programming
]]

if debugX then
    warn('Initialising Rayfield')
end

local function getService(name)
    local service = game:GetService(name)
    return cloneref and cloneref(service) or service
end

-- Loads and executes a function hosted on a remote URL. This includes timeout handling.
local function loadWithTimeout(url: string, timeout: number?): ...any
    assert(type(url) == "string", "Expected string, got " .. type(url))
    timeout = timeout or 5
    local requestCompleted = false
    local success, result = false, nil

    local requestThread = task.spawn(function()
        local fetchSuccess, fetchResult = pcall(game.HttpGet, game, url)
        if not fetchSuccess or #fetchResult == 0 then
            result = #fetchResult == 0 and "Empty response" or fetchResult
            success = false
            requestCompleted = true
            return
        end
        
        local content = fetchResult
        local execSuccess, execResult = pcall(loadstring(content))
        success, result = execSuccess, execResult
        requestCompleted = true
    end)

    local timeoutThread = task.delay(timeout, function()
        if not requestCompleted then
            warn(`Request for {url} timed out after {timeout} seconds`)
            task.cancel(requestThread)
            result = "Request timed out"
            requestCompleted = true
        end
    end)

    while not requestCompleted do
        task.wait()
    end
    
    if coroutine.status(timeoutThread) ~= "dead" then
        task.cancel(timeoutThread)
    end
    
    if not success then
        warn(`Failed to process {url}: {result}`)
    end
    
    return success and result or nil
end

local requestsDisabled = true -- Use getgenv and check if requests are disabled
local InterfaceBuild = '3K3W'
local Release = "Build 1.672"
local RayfieldFolder = "Rayfield"
local ConfigurationFolder = RayfieldFolder.."/Configurations"
local ConfigurationExtension = ".rfld"

-- Settings Table
local settingsTable = {
    General = {
        rayfieldOpen = {Type = 'bind', Value = 'K', Name = 'Rayfield Keybind'},
    },
    System = {
        usageAnalytics = {Type = 'toggle', Value = true, Name = 'Anonymised Analytics'},
    }
}

local HttpService = getService('HttpService')
local RunService = getService('RunService')

-- Environment Check
local useStudio = RunService:IsStudio() or false
local settingsCreated = false
local cachedSettings

local request = (syn and syn.request) or (fluxus and fluxus.request) or (http and http.request) or http_request or request

-- Load settings
local function loadSettings()
    local success, result = pcall(function()
        task.spawn(function()
            local file
            if isfolder and isfolder(RayfieldFolder) then
                if isfile and isfile(RayfieldFolder..'/settings'..ConfigurationExtension) then
                    file = readfile(RayfieldFolder..'/settings'..ConfigurationExtension)
                end
            end
            if useStudio then
                file = [[
        {"General":{"rayfieldOpen":{"Value":"K","Type":"bind","Name":"Rayfield Keybind","Element":{"HoldToInteract":false,"Ext":true,"Name":"Rayfield Keybind","Set":null,"CallOnChange":true,"Callback":null,"CurrentKeybind":"K"}}},"System":{"usageAnalytics":{"Value":false,"Type":"toggle","Name":"Anonymised Analytics","Element":{"Ext":true,"Name":"Anonymised Analytics","Set":null,"CurrentValue":false,"Callback":null}}}}
    ]]
            end

            if file then
                local decodedFileSuccess, decodedFile = pcall(function() return HttpService:JSONDecode(file) end)
                file = decodedFileSuccess and decodedFile or {}
            else
                file = {}
            end

            if not settingsCreated then 
                cachedSettings = file
                return
            end

            if file ~= {} then
                for categoryName, settingCategory in pairs(settingsTable) do
                    if file[categoryName] then
                        for settingName, setting in pairs(settingCategory) do
                            if file[categoryName][settingName] then
                                setting.Value = file[categoryName][settingName].Value
                                if setting.Element then
                                    setting.Element:Set(setting.Value)
                                end
                            end
                        end
                    end
                end
            end
        end)
    end)
    
    if not success then 
        warn('Rayfield had an issue accessing configuration saving capability.')
    end
end

if debugX then
    warn('Now Loading Settings Configuration')
end

loadSettings()

if debugX then
    warn('Settings Loaded')
end

if not requestsDisabled then
    -- Analytics Reporting
    if debugX then
        warn('Querying Settings for Reporter Information')
    end
    local function sendReport()
        if useStudio then
            print('Sending Analytics')
        else
            if debugX then warn('Reporting Analytics') end
            task.spawn(function()
                local success, reporter = pcall(function()
                    return loadstring(game:HttpGet("https://analytics.sirius.menu/v1/reporter", true))()
                end)
                if success and reporter then
                    pcall(function()
                        reporter.report("Rayfield", Release, InterfaceBuild)
                    end)
                else
                    warn("Failed to load or execute the reporter. Please notify Rayfield developers at sirius.menu/discord.")
                end
            end)
            if debugX then warn('Finished Report') end
        end
    end
    if cachedSettings and (cachedSettings.System.usageAnalytics.Value or not cachedSettings) then
        sendReport()
    end
end

if debugX then
    warn('Moving on to continue initialization')
end

-- Define Rayfield Library
local RayfieldLibrary = {
    Flags = {},
    Theme = {
        Default = {
            TextColor = Color3.fromRGB(240, 240, 240),
            Background = Color3.fromRGB(25, 25, 25),
            Topbar = Color3.fromRGB(34, 34, 34),
            Shadow = Color3.fromRGB(20, 20, 20),
            NotificationBackground = Color3.fromRGB(20, 20, 20),
            NotificationActionsBackground = Color3.fromRGB(230, 230, 230),
            TabBackground = Color3.fromRGB(80, 80, 80),
            TabStroke = Color3.fromRGB(85, 85, 85),
            TabBackgroundSelected = Color3.fromRGB(210, 210, 210),
            TabTextColor = Color3.fromRGB(240, 240, 240),
            SelectedTabTextColor = Color3.fromRGB(50, 50, 50),
            ElementBackground = Color3.fromRGB(35, 35, 35),
            ElementBackgroundHover = Color3.fromRGB(40, 40, 40),
            SecondaryElementBackground = Color3.fromRGB(25, 25, 25),
            ElementStroke = Color3.fromRGB(50, 50, 50),
            SecondaryElementStroke = Color3.fromRGB(40, 40, 40),
            SliderBackground = Color3.fromRGB(50, 138, 220),
            SliderProgress = Color3.fromRGB(50, 138, 220),
            SliderStroke = Color3.fromRGB(58, 163, 255),
            ToggleBackground = Color3.fromRGB(30, 30, 30),
            ToggleEnabled = Color3.fromRGB(0, 146, 214),
            ToggleDisabled = Color3.fromRGB(100, 100, 100),
            ToggleEnabledStroke = Color3.fromRGB(0, 170, 255),
            ToggleDisabledStroke = Color3.fromRGB(125, 125, 125),
            ToggleEnabledOuterStroke = Color3.fromRGB(100, 100, 100),
            ToggleDisabledOuterStroke = Color3.fromRGB(65, 65, 65),
            DropdownSelected = Color3.fromRGB(40, 40, 40),
            DropdownUnselected = Color3.fromRGB(30, 30, 30),
            InputBackground = Color3.fromRGB(30, 30, 30),
            InputStroke = Color3.fromRGB(65, 65, 65),
            PlaceholderColor = Color3.fromRGB(178, 178, 178)
        },
        -- ... Additional themes can be declared here
    }
}

-- Services
local UserInputService = getService("UserInputService")
local TweenService = getService("TweenService")
local Players = getService("Players")
local CoreGui = getService("CoreGui")

-- Interface Management
local Rayfield = useStudio and script.Parent:FindFirstChild('Rayfield') or game:GetObjects("rbxassetid://10804731440")[1]
local buildAttempts = 0
local correctBuild = false
local warned
local globalLoaded

-- Check Build
repeat
    if Rayfield:FindFirstChild('Build') and Rayfield.Build.Value == InterfaceBuild then
        correctBuild = true
        break
    end

    correctBuild = false

    if not warned then
        warn('Rayfield | Build Mismatch')
        print('Rayfield may encounter issues as you are running an incompatible interface version ('.. ((Rayfield:FindFirstChild('Build') and Rayfield.Build.Value) or 'No Build') ..').\n\nThis version of Rayfield is intended for interface build '..InterfaceBuild..'.')
        warned = true
    end

    local toDestroy = Rayfield
    Rayfield = useStudio and script.Parent:FindFirstChild('Rayfield') or game:GetObjects("rbxassetid://10804731440")[1]
    if toDestroy and not useStudio then toDestroy:Destroy() end

    buildAttempts = buildAttempts + 1
until buildAttempts >= 2

Rayfield.Enabled = false

-- Set parent based on method used to run the script
if gethui then
    Rayfield.Parent = gethui()
elseif syn and syn.protect_gui then 
    syn.protect_gui(Rayfield)
    Rayfield.Parent = CoreGui
elseif not useStudio and CoreGui:FindFirstChild("RobloxGui") then
    Rayfield.Parent = CoreGui:FindFirstChild("RobloxGui")
elseif not useStudio then
    Rayfield.Parent = CoreGui
end

if gethui then
    for _, Interface in ipairs(gethui():GetChildren()) do
        if Interface.Name == Rayfield.Name and Interface ~= Rayfield then
            Interface.Enabled = false
            Interface.Name = "Rayfield-Old"
        end
    end
elseif not useStudio then
    for _, Interface in ipairs(CoreGui:GetChildren()) do
        if Interface.Name == Rayfield.Name and Interface ~= Rayfield then
            Interface.Enabled = false
            Interface.Name = "Rayfield-Old"
        end
    end
end

local minSize = Vector2.new(1024, 768)
local useMobileSizing = Rayfield.AbsoluteSize.X < minSize.X and Rayfield.AbsoluteSize.Y < minSize.Y

if UserInputService.TouchEnabled then
    useMobilePrompt = true
end

-- Object Variables
local Main = Rayfield.Main
local MPrompt = Rayfield:FindFirstChild('Prompt')
local Topbar = Main.Topbar
local Elements = Main.Elements
local LoadingFrame = Main.LoadingFrame
local TabList = Main.TabList
local dragBar = Rayfield:FindFirstChild('Drag')
local dragInteract = dragBar and dragBar.Interact or nil
local dragBarCosmetic = dragBar and dragBar.Drag or nil

local dragOffset = 255
local dragOffsetMobile = 150

Rayfield.DisplayOrder = 100
LoadingFrame.Version.Text = Release

-- Load icons
local Icons = useStudio and require(script.Parent.icons) or loadWithTimeout('https://raw.githubusercontent.com/SiriusSoftwareLtd/Rayfield/refs/heads/main/icons.lua')

-- Variables to manage state
local CFileName = nil
local CEnabled = false
local Minimised = false
local Hidden = false
local Debounce = false
local searchOpen = false
local Notifications = Rayfield.Notifications
local SelectedTheme = RayfieldLibrary.Theme.Default

local function ChangeTheme(Theme)
    if typeof(Theme) == 'string' then
        SelectedTheme = RayfieldLibrary.Theme[Theme]
    elseif typeof(Theme) == 'table' then
        SelectedTheme = Theme
    end

    -- Update colors based on the selected theme
    Rayfield.Main.BackgroundColor3 = SelectedTheme.Background
    Rayfield.Main.Topbar.BackgroundColor3 = SelectedTheme.Topbar
    Rayfield.Main.Shadow.Image.ImageColor3 = SelectedTheme.Shadow

    -- Update UI components
    for _, text in ipairs(Rayfield:GetDescendants()) do
        if text:IsA('TextLabel') or text:IsA('TextBox') then text.TextColor3 = SelectedTheme.TextColor end
    end

    -- Update Elements with the new theme
    for _, TabPage in ipairs(Elements:GetChildren()) do
        for _, Element in ipairs(TabPage:GetChildren()) do
            if Element:IsA("Frame") and Element.Name ~= "Placeholder" then
                Element.BackgroundColor3 = SelectedTheme.ElementBackground
                Element.UIStroke.Color = SelectedTheme.ElementStroke
            end
        end
    end
end

-- Other functions for handling configurations, notifications, drag logic will follow...
-- You can continue enhancing and refactoring the rest of your script similarly.

function RayfieldLibrary:CreateWindow(Settings)
    -- Initialization code for creating the window with necessary settings
    -- ...
end

-- Example hook for closing and opening with key presses
handleInput = UserInputService.InputBegan:Connect(function(input, processed)
    if input.UserInputType == Enum.UserInputType.Keyboard then
        -- Call the function to toggle visibility or other logic here.
    end
end)

-- Add more control to handle themes, sections, and user inputs correctly.
-- Return the RayfieldLibrary so it can be accessed in other scripts.
return RayfieldLibrary
